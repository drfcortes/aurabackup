---
import Layout from '../../layouts/Layout.astro';

// Obtener y decodificar el email de la URL
const email = decodeURIComponent(Astro.params.email);

// Llamar a la API de bÃºsqueda
const apiUrl = `https://qyx30mhh90.execute-api.us-east-2.amazonaws.com/v1/searchAuraBlocks?email=${encodeURIComponent(email)}`;

let blocks = [];
try {
    const res = await fetch(apiUrl);
    if (res.ok) {
        blocks = await res.json();
    } else {
        console.error("Error fetching data:", res.status);
    }
} catch (err) {
    console.error("Fetch error:", err);
}
---

<Layout>
    <main class="p-8 max-w-7xl mx-auto text-aura-deep dark:text-aura-cream">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
            <h1 class="text-3xl font-bold text-aura-green dark:text-aura-yellow">
                Blocks for <span class="text-aura-leather dark:text-aura-yellow">{email}</span>
            </h1>
            {blocks.length > 0 && (
                    <button
                            id="downloadJsonBtn"
                            class="mt-4 sm:mt-0 bg-aura-green dark:bg-aura-leather text-white dark:text-aura-cream px-4 py-2 rounded-lg hover:bg-aura-deep dark:hover:bg-aura-yellow transition"
                    >
                        Download JSON
                    </button>
            )}
        </div>

        {blocks.length > 0 ? (
                <>
                    <!-- Filtro -->
                    <div class="mb-4">
                        <input
                                id="filterInput"
                                type="text"
                                placeholder="Filter by model or provider..."
                                class="w-full sm:w-1/2 px-4 py-2 border border-aura-olive dark:border-aura-gray rounded-lg bg-white dark:bg-aura-deep text-aura-black dark:text-aura-cream focus:outline-none"
                        />
                    </div>

                    <!-- Grid adaptativo tipo bento -->
                    <div id="blocksGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        {blocks.map(block => (
                                <div class="bg-aura-soft dark:bg-aura-deep rounded-xl shadow-lg border border-aura-olive dark:border-aura-gray p-4 flex flex-col justify-between">
                                    <div class="mb-4">
                                        <h2 class="text-lg font-bold text-aura-green dark:text-aura-yellow truncate">{block.model}</h2>
                                        <p class="text-sm text-aura-gray dark:text-aura-cream">{block.provider}</p>
                                        <p class="text-xs mt-1 text-aura-gray dark:text-aura-cream">
                                            {new Date(block.timestamp).toLocaleString()}
                                        </p>
                                        <p class="text-xs mt-1 font-mono">{block.uid}</p>
                                        <p class="text-xs mt-1">License: {block.license}</p>
                                    </div>

                                    <div class="flex flex-col gap-2 mt-auto">
                                        <button
                                                class="bg-aura-green dark:bg-aura-leather text-white px-3 py-1 rounded-lg hover:bg-aura-deep dark:hover:bg-aura-yellow transition text-sm"
                                                onclick={`showAuraReference('${block.model}', '${block.timestamp}', '${block.uid}')`}
                                        >
                                            ðŸ“„ Reference
                                        </button>
                                        <a
                                                href={`/block/${block.uid}`}
                                                class="text-center bg-aura-green dark:bg-aura-leather text-white dark:text-aura-cream px-3 py-1 rounded-lg hover:bg-aura-deep dark:hover:bg-aura-yellow transition text-sm"
                                        >
                                            View Details
                                        </a>
                                    </div>
                                </div>
                        ))}
                    </div>

                    <!-- Modal Reference -->
                    <div id="referenceModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
                        <div class="bg-white dark:bg-aura-deep rounded-lg shadow-lg max-w-lg w-full p-6 text-aura-deep dark:text-aura-cream">
                            <h2 class="text-xl font-bold mb-4 text-aura-green dark:text-aura-yellow">ðŸ“„ AURA Reference</h2>
                            <p class="text-sm mb-3">This is the recommended way to cite this AURA block in your documents.</p>
                            <pre id="referenceText" class="bg-aura-beige dark:bg-aura-gray p-3 rounded-md text-sm whitespace-pre-wrap"></pre>
                            <div class="flex justify-end gap-2 mt-4">
                                <button id="copyReferenceBtn" class="bg-aura-green dark:bg-aura-leather text-white px-4 py-2 rounded-lg hover:bg-aura-deep dark:hover:bg-aura-yellow transition">ðŸ“‹ Copy</button>
                                <button id="closeModalBtn" class="bg-gray-400 dark:bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-500 dark:hover:bg-gray-700 transition">Close</button>
                            </div>
                        </div>
                    </div>
                </>
        ) : (
                <div class="p-6 bg-aura-beige dark:bg-aura-olive rounded-2xl border border-aura-olive dark:border-aura-gray text-center">
                    <p class="text-lg">No blocks found for this email.</p>
                </div>
        )}
    </main>

    <!-- Script para filtro, descarga y referencia -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cards = Array.from(document.querySelectorAll("#blocksGrid > div"));
            const filterInput = document.getElementById("filterInput");
            const downloadBtn = document.getElementById("downloadJsonBtn");

            const modal = document.getElementById("referenceModal");
            const referenceText = document.getElementById("referenceText");
            const copyBtn = document.getElementById("copyReferenceBtn");
            const closeBtn = document.getElementById("closeModalBtn");

            filterInput?.addEventListener("input", () => {
                const filterValue = filterInput.value.toLowerCase();
                cards.forEach(card => {
                    const text = card.textContent.toLowerCase();
                    card.style.display = text.includes(filterValue) ? "" : "none";
                    });
                });

            downloadBtn?.addEventListener("click", () => {
                const data = cards.map(card => ({
                    uid: card.querySelector("p.font-mono").textContent,
                    model: card.querySelector("h2").textContent,
                    provider: card.querySelector("p.text-sm").textContent,
                    timestamp: card.querySelectorAll("p.text-xs")[0].textContent,
                    license: card.querySelectorAll("p.text-xs")[2].textContent.replace("License: ", "")
                    }));
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `aura_blocks_${Date.now()}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                });

            window.showAuraReference = (model, timestamp, uid) => {
                const year = timestamp ? new Date(timestamp).getFullYear() : "n.d.";
                const ref = `${model || "Unknown Model"} (${year}). ${uid}. Retrieved from https://aurablock.org/block/${uid}`;
                referenceText.textContent = ref;
                modal.classList.remove("hidden");
                modal.classList.add("flex");
                };

            copyBtn.addEventListener("click", () => {
                navigator.clipboard.writeText(referenceText.textContent).then(() => {
                    alert("AURA Reference copied to clipboard!");
                    });
                });

            closeBtn.addEventListener("click", () => {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
                });
            });
    </script>
</Layout>
